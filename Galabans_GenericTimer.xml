<?xml version="1.0" encoding="iso-8859-1"?>
<!DOCTYPE muclient>
<!-- Saved on Thursday, February 18, 2016, 1:42 PM -->
<!-- MuClient version 4.94 -->

<!-- Plugin "Galabans_GenericTimer" generated by Plugin Wizard -->

<muclient>
<plugin
   name="Galabans_GenericTimer"
   author="Galaban"
   id="f4ddeb8ec7edb40b6819c61e"
   language="Lua"
   purpose="A plugin for LOTJ"
   save_state="y"
   date_written="2016-02-18 13:41:18"
   requires="4.68"
   version="1.0"
   >

</plugin>

<!--  Timers  -->

<timers>
	<timer name="tickTimer" script="tick" enabled="n" second="2" />
</timers>

<!--   Aliases    --> 
<aliases>
  <alias script="closeWindow" match="timer hide" enabled="y" ignore_case="y" group="LotJVisualSpace" sequence="100" />
  <alias script="showWindow" match="timer show" enabled="y" ignore_case="y" group="LotJVisualSpace" sequence="100" />
  <alias script="showHelp" match="timer" enabled="y" ignore_case="y" group="LotJVisualSpace" sequence="100" />
  <alias script="setTimer" match="timer * *" enabled="y" ignore_case="y" group="LotJVisualSpace" sequence="100" />
  <alias script="clearTimer" match="timer stop" enabled="y" ignore_case="y" group="LotJVisualSpace" sequence="100" />
</aliases>


<!--  Script  -->


<script>
<![CDATA[

require "movewindow"

--------------------------------------------------------------------------------
--  GLOBALS
--
b_black = ANSI(1)..ANSI(30)
d_black = ANSI(22)..ANSI(30)
b_red = ANSI(1)..ANSI(31)
d_red = ANSI(22)..ANSI(31)
b_green = ANSI(1)..ANSI(32)
d_green = ANSI(22)..ANSI(32)
b_yellow = ANSI(1)..ANSI(33)
d_yellow = ANSI(22)..ANSI(33)
b_blue = ANSI(1)..ANSI(34)
d_blue = ANSI(22)..ANSI(34)
b_magenta = ANSI(1)..ANSI(35)
d_magenta = ANSI(22)..ANSI(35)
b_cyan = ANSI(1)..ANSI(36)
d_cyan = ANSI(22)..ANSI(36)
b_white = ANSI(1)..ANSI(37)
d_white = ANSI(22)..ANSI(37)

win = "win_" .. GetPluginID() 
font = "font"..GetPluginID()

windowVisible = tonumber(GetVariable("show_window")) or 0
tickCount = 0
total_ticks = 1 
continuous = false
DEFAULT_TITLE = "Timer"
title = DEFAULT_TITLE
TICK_DURATION = 1 -- constant DO NOT TOUCH... (Changing this from 1 causes code-fixable problems)
MAX_TIMER = 86400 -- one day

width = 400
height = 60

--------------------------------------------------------------------------------
-- Utility Functions
--
function ErrorNote(text)
    AnsiNote(b_red..text)
end

function trim(s)
  return (s:gsub("^%s*(.-)%s*$", "%1"))
end

function round(x)
  if (x >= 0) then
    return math.floor(x + 0.5)
  end

  return math.ceil(x - 0.5)
end

function getTimeText(time)
	local retval = {}
	local secs = tonumber(time)
	if (secs >= 3600) then
		local hours = math.floor(secs / 3600)
		secs = secs - (hours * 3600)
		retval[#retval + 1] = tostring(string.format("%d", hours) .. " hours")
	end
	if (secs >= 60) then
		local mins = math.floor(secs / 60)
		secs = secs - (mins * 60)
		retval[#retval + 1] = tostring(string.format("%d", mins) .. " mins")
	end
	if (secs >= 1) then
		retval[#retval + 1] = tostring(string.format("%d", secs) .. " secs")
	end

	return table.concat(retval, ", ")
end

--------------------------------------------------------------------------------
-- Alias Handlers
--
function setTimer(rName, rLine, rWildcards, rStyles)
    local timer = tonumber(rWildcards[1])
    local name = rWildcards[2]

    local haveError = false
    if (timer == nil) then
        ErrorNote("Unable to convert <"..rWildcards[1].."> to number.")
        haveError = true
    elseif (timer < 2) then
        if (timer > -2) then
            ErrorNote("Minimum timer value is 2. Not setting timer.")
            haveError = true
        else
            timer = 0 - timer
            continuous = true
        end
    elseif (timer > MAX_TIMER) then
        ErrorNote("Maximum timer value is "..MAX_TIMER)
        haveError = true
    end
    
    if (haveError == false) then
        if (name == nil or name == "") then
            name = DEFAULT_TITLE
        else
            name = trim(name)
            if (string.len(name) > 30) then
                ErrorNote("Maximum length on timer text is 30.")
                haveError = true
            end
        end
    end

    if (haveError) then
        showHelp()
        return
    end

    title = name
    total_ticks = timer

    -- If this changes from 1, use this calculation
    --total_ticks = round(timer / TICK_DURATION)

    timerStart()
end


function clearTimer()
    timerStop()
end

function showHelp()
    Note("")
    AnsiNote(d_white .. "-------------------------------------------------------------------------------")
    AnsiNote(b_green .. "Galaban's Generic Timer")
    Note("")
    AnsiNote(d_white .. "Usage:")
    AnsiNote(b_green .. "timer               "..d_white.."-- this screen")
    AnsiNote(b_green .. "timer hide/show     "..d_white.."-- show/hide the window")
    Note("")
    AnsiNote(b_green .. "timer <len> <title> "..d_white.."-- Start the timer for <len> seconds with the <title> text")
    AnsiNote(b_green .. "timer stop          "..d_white.."-- Stops the timer")
    AnsiNote(d_white .. "  Note: using a negative value for the length will put it in continuous mode so")
    AnsiNote(d_white .. "  that the timer will keep counting time even once it has expired. For example")
    AnsiNote(d_white .. "  -60 would be a 1 minute timer that continues counting past the 1 minute mark.")
    AnsiNote(d_white .. "-------------------------------------------------------------------------------")
    Note("")
end

--------------------------------------------------------------------------------
-- Plugin Events
--
function OnPluginSaveState()
    -- save window location
    movewindow.save_state(win)
    
    SetVariable("show_window", tostring(windowVisible))

end

function OnPluginInstall()		
    

    -- add the fonts
    check(WindowFont(win, font, "Arial", 10, true, false, false, false))
    
    font_height = WindowFontInfo(win, font, 1) -  WindowFontInfo(win, font, 4) + 1 -- height
    font_width  = WindowFontInfo(win, font, 6)  -- avg width
    line_height = font_height + 1

    -- install the window movement handlers, get back the window position
    windowinfo = movewindow.install(win, 6)  -- default to 6 (on top right)

    -- make windows so I can grab the font info
    WindowCreate(win, windowinfo.window_left, 
                windowinfo.window_top, 
                width, height,
                windowinfo.window_mode, 
                windowinfo.window_flags, 
                ColourNameToRGB("black"))  -- create window
    
    movewindow.add_drag_handler(win, 0, 0, 0, WindowFontInfo(win, font, 1))
    
    if (windowVisible == 1) then
        drawWindow()
    end

end

function OnPluginClose()
    WindowShow(win,  false)
    OnPluginSaveState()
end

function OnPluginEnable()
    if (windowVisible == 1) then
        drawWindow()
    end
    OnPluginSaveState() --maybe overkill
end 

function OnPluginDisable()
    WindowShow(win,  false)
    OnPluginSaveState()
end


--------------------------------------------------------------------------------
--  Window functions
--

function drawWindow()
	left = 0
	top = 0
	right = width
	bottom = height
	
	-- Clear the window
	WindowRectOp(win, miniwin.rect_fill, 0, 0, right, bottom, ColourNameToRGB("black"))

	-- Border
	WindowRectOp(win, 5, 0, 0, 0, 0, 5, 15 + 0x1000)
	
	movewindow.add_drag_handler(win, 0, 0, 0, WindowFontInfo(win, font, 1))

	-- The "X" tag for closing the window
	drawX(win, right-15, 5, ColourNameToRGB("white"), "windowX", "closeWindow", "Close window")	
	
	local percent = 0
	local pixels = 0
	
    -- Title
    local textString = title
	local textWidth = WindowTextWidth(win, font, textString)
	WindowText(win, font, textString, left+10, bottom-20, left+10+textWidth, bottom-5, ColourNameToRGB("white"))

    -- Initial calculation...  In case they open the window mid-timer...
	-- calculate amount of jump we've completed
	if (tickCount > 0) then
        if (tickCount >= total_ticks) then
            percent = 1
        else
            percent = tickCount / total_ticks
        end
	else
		percent = 0
	end
	pixels = percent * (right - 70)

	local winText = round(percent*100) .. "%"
	
	-- jump window header - remaining jump time
	if (tickCount > 0) then
		local durationText = "Duration: " .. getTimeText(tickCount * TICK_DURATION)
		textWidth = WindowTextWidth(win, font, durationText)
		WindowText(win, font, durationText, left+(200-(textWidth/2)) , 5, left+(200+(textWidth/2)), 20, ColourNameToRGB("white"))
	end
	
	textWidth = WindowTextWidth(win, font, winText)
	WindowText(win, font, winText, left+(25-(textWidth/2)), bottom-45, left+(25+(textWidth/2)), bottom-15, ColourNameToRGB("white"))


	-- draw systems and traveling bar
	WindowLine(win, left+60, bottom/2, right-10, bottom/2, ColourNameToRGB("white"), miniwin.pen_solid, 4)
	WindowCircleOp(win, 1, left+55, (bottom/2)-5, left+65, (bottom/2)+5, ColourNameToRGB("olivedrab"), 0, 2, ColourNameToRGB("olivedrab"), 0)
	WindowCircleOp(win, 1, right-15, (bottom/2)-5, right-5, (bottom/2)+5, ColourNameToRGB("olivedrab"), 0, 2, ColourNameToRGB("olivedrab"), 0)
	

	-- draw player ship on traveling bar
	WindowCircleOp(win, 1, left+55+pixels, (bottom/2)-5, left+65+pixels, (bottom/2)+5, ColourNameToRGB("dodgerblue"), 0, 2, ColourNameToRGB("dodgerblue"), 0)
	

	WindowShow(win, true)
end

-- method to draw a colored X in window at left, top with hotspotname and does hotspotclick when you click it
function drawX(window, left, top, color, hotSpotName, hotSpotClick, hotSpotText)
	WindowLine(window, left, top, left+10, top+10, color, miniwin.pen_solid, 2)
	WindowLine(window, left, top+10, left+10, top, color, miniwin.pen_solid, 2)
	WindowAddHotspot(window, hotSpotName, left, top, left+10, top+10, "", "", hotSpotClick, "", "", hotSpotText, 1, 0)
	Redraw()
end

function closeWindow()
    Note("Closing the window.")
	windowVisible = 0
	WindowShow(win, false)
    OnPluginSaveState()
end

function showWindow()
    Note("Showing the window.")
	windowVisible = 1
	drawWindow()
    OnPluginSaveState()
end

--------------------------------------------------------------------------------
--  Timer functionality
--
function tick()
    tickCount = tickCount + 1

    if (windowVisible == 1) then
        drawWindow()
    end
    
    if (tickCount > total_ticks) then
        if (continuous == false) then
            completeTimer()
        elseif (tickCount == (total_ticks+1)) then
            Note("Timer complete.  Continuing to track time.")
            Note("User 'timer stop' to stop the timer")
        elseif (tickCount > MAX_TIMER) then
            timerStop() -- just stop it... don't complete it.
        end
    end
end


function timerStart()
    tickCount = 0

    EnableTimer("tickTimer", true)
    SetTimerOption("tickTimer", "second", TICK_DURATION);

    -- Not visible?  MAKE IT VISIBLE! MWahaha...
    if (windowVisible ~= 1) then
        showWindow()
    else
        drawWindow()
    end
    BroadcastPlugin(1, title)
end

function timerStop()

    tickCount = 0
    total_ticks = 1
    title = DEFAULT_TITLE
    EnableTimer("tickTimer", false)

    if (windowVisible == 1) then
        drawWindow()
    end
    BroadcastPlugin(2, title)
end

function completeTimer()

    local outtext = "Timer completed"
    if (title ~= DEFAULT_TITLE) then
        outtext = outtext..": "..title
    end
    Note(outtext)
    BroadcastPlugin(99, title)
    timerStop()

end


]]>
</script>


</muclient>
